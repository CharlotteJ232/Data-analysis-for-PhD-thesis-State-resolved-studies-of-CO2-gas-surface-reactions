from dataclasses import dataclass
from matplotlib import pyplot as plt
import numpy as np
from scipy.optimize import least_squares
from matplotlib.ticker import (AutoMinorLocator, MultipleLocator)
import os
from matplotlib import cm
import colorcet as cc

folderstartstart = "C:/Users/jansenc3/surfdrive/"
folderstartstart = "C:/Users/Werk/Surfdrive/"
folderstart=folderstartstart + "DATA/"

datalist = []
colorscheme = {'CO2':'black', 'H2':'red', 'HD':'purple', 'H':'orange', 'D2':'blue', 'CO':'gray', 'H2O':'cyan', 'O2':'green', 'D2CO':'orange'}
ext='.txt'
labels = {'CO2':'m/e=44 (CO$_2$)', 'H2':'m/e=2 (H$_2$, D)', 'D2':'m/e=4 (D$_2$)', 'CO':'m/e=28 (CO)'}

save_to_daily_folder=False

overview_plot_savefolder=folderstartstart+"Proefschrift/Cobalt/Figures/"
save_overview_plots=False

def main():

    datalist.append(Tpd_dataset(folder = '2024/02 Feb/240201/tpd/',
    filename = 'tpd01',
    gases = {'CO':2,'CO2':3, 'H2':4, 'D2':5, 'D2CO':7 }, # '30':6,
    k_per_s = 3,
    temps = [250,650],
    t_shift = 0,
    kw_amp = 0.185-0.014, 
    dosing_time = 10, #minutes
    label='D2 + 10m CO2'
    ))

    datalist.append(Tpd_dataset(folder = '2024/02 Feb/240201/tpd/',
    filename = 'tpd02',
    gases = {'CO':2,'CO2':3, 'H2':4, 'D2':5, 'D2CO':7 }, # '30':6,
    k_per_s = 3,
    temps = [250,650],
    t_shift = 0,
    kw_amp = 0.225-0.032, 
    dosing_time = 5, #minutes
    label='D2 + 5m CO2'
    ))

    datalist.append(Tpd_dataset(folder = '2024/02 Feb/240201/tpd/',
    filename = 'tpd03',
    gases = {'CO':2,'CO2':3, 'H2':4, 'D2':5, 'D2CO':7 }, # '30':6,
    k_per_s = 3,
    temps = [250,650],
    t_shift = 0,
    kw_amp = 0.234-0.031, 
    dosing_time = 2, #minutes
    label='D2 + 2m CO2'
    ))

    datalist.append(Tpd_dataset(folder = '2024/02 Feb/240201/tpd/',
    filename = 'tpd04',
    gases = {'CO':2,'CO2':3, 'H2':4, 'D2':5, 'D2CO':7 }, # '30':6,
    k_per_s = 3,
    temps = [250,650],
    t_shift = 0,
    kw_amp = 0.223-0.028, 
    dosing_time = 10, #minutes
    label='D2 + 10m CO2'
    ))

    # datalist.append(Tpd_dataset(folder = '2024/02 Feb/240221/tpd/',
    # filename = 'tpd01',
    # gases = {'CO':2,'CO2':3, 'H2':4, 'D2':5, 'D2CO':7 }, # '30':6,
    # k_per_s = 3,
    # temps = [250,650],
    # t_shift = 0,
    # kw_amp = 0.2-0.016, 
    # dosing_time = 10, #minutes
    # label='10m CO2 clean'
    # ))

    datalist.append(Tpd_dataset(folder = '2024/02 Feb/240221/tpd/',
    filename = 'tpd02',
    gases = {'CO':2,'CO2':3, 'H2':4, 'D2':5, 'D2CO':7 }, # '30':6,
    k_per_s = 3,
    temps = [250,650],
    t_shift = 0,
    kw_amp = 0.269-0.042, 
    dosing_time = 20, #minutes
    label='D2 + 20m CO2'
    ))

    datalist.append(Tpd_dataset(folder = '2024/02 Feb/240221/tpd/',
    filename = 'tpd03',
    gases = {'CO':2,'CO2':3, 'H2':4, 'D2':5, 'D2CO':7 }, # '30':6,
    k_per_s = 3,
    temps = [250,650],
    t_shift = 0,
    kw_amp = 0.26-0.053, 
    dosing_time = 10, #minutes
    label='D2 + 10m CO2'
    ))

    datalist.append(Tpd_dataset(folder = '2024/02 Feb/240221/tpd/',
    filename = 'tpd04',
    gases = {'CO':2,'CO2':3, 'H2':4, 'D2':5, 'D2CO':7 }, # '30':6,
    k_per_s = 3,
    temps = [250,650],
    t_shift = 0,
    kw_amp = 0.234-0.04, 
    dosing_time = 60, #minutes
    label='D2 + 60m CO2'
    ))

    datalist.append(Tpd_dataset(folder = '2024/02 Feb/240221/tpd/',
    filename = 'tpd05',
    gases = {'CO':2,'CO2':3, 'H2':4, 'D2':5, 'D2CO':7 }, # '30':6,
    k_per_s = 3,
    temps = [250,650],
    t_shift = 0,
    kw_amp = 0.267-0.061, 
    dosing_time = 40, #minutes
    label='D2 + 40m CO2'
    ))

    # datalist.append(Tpd_dataset(folder = '2024/02 Feb/240222/tpd/',
    # filename = 'tpd01',
    # gases = {'CO':2,'CO2':3, 'H2':4, 'D2':5, 'D2CO':7 }, # '30':6,
    # k_per_s = 3,
    # temps = [250,650],
    # t_shift = 0,
    # kw_amp = 0.214-0.013, 
    # dosing_time = 105, #minutes
    # label='D2 + 105m CO2 (laser)'
    # ))




    for dataset in datalist:
        print(dataset.folder)
        dataset.read_data()
        dataset.linear_background('CO2', start=330, stop=405) #start=330, stop=405
        dataset.plot_tpd_withbackground('CO2')
        dataset.calc_integral('CO2')
        print(dataset.integrals['CO2'])
        # dataset.plot_tpds()
        # dataset.plot_tpds_normalized()
    
    plot_all_tpds(datalist, 'CO2')
    plot_integrals(datalist, 'CO2')


def plot_all_tpds(datalist, gas):
    for dataset in datalist:
        # corrected_data = (dataset.data[dataset.integral_start:dataset.integral_stop]-dataset.background)/dataset.kw_amp
        corrected_data = dataset.data[gas][dataset.bg_index[gas]]-dataset.background[gas][dataset.bg_index[gas]]
        corrected_temperature = dataset.temperature[dataset.bg_index[gas]]
        sorted_index = np.argsort(corrected_temperature)
        if dataset.t_shift == None:
            shift = 0
        else:
            shift = dataset.t_shift
        label = 'shift='+str(dataset.t_shift)+', '+dataset.label
        label = dataset.label
        plt.plot(corrected_temperature[sorted_index]+shift, corrected_data[sorted_index],label=label)
    # plt.plot(-1,0,'--',c='gray', label='Background')
    # plt.plot(-1,0, c='gray',label='Crystal dosing')
    plt.legend(fontsize=8, loc='upper right',bbox_to_anchor=(1.3, 1))
    plt.axis([dataset.temperature[dataset.bg_index[gas][0]], dataset.temperature[dataset.bg_index[gas][-1]], None, None])
    plt.xlabel('approximate temperature (K)')
    plt.ylabel('QMS signal')
    plt.title(gas)
    if save_overview_plots:
        if not os.path.exists(overview_plot_savefolder):
            os.makedirs(overview_plot_savefolder)
        plt.savefig(overview_plot_savefolder + gas + '_all_tpds.png',dpi=500, bbox_inches='tight')
        plt.savefig(overview_plot_savefolder + gas + '_all_tpds.eps',dpi=500, bbox_inches='tight')
        plt.savefig(overview_plot_savefolder + gas + '_all_tpds.pdf',dpi=500, bbox_inches='tight')
    plt.show()
    plt.close()


def plot_integrals(datalist, gas):
    for dataset in datalist:
        plt.plot(dataset.dosing_time, dataset.integrals[gas], 'o', color='black')
    # plt.plot(-1, 0, 's', c='gray',label='Crystal dosing')
    # plt.plot(-1, 0, 'o',c='gray', label='Background')
    plt.axis([0, None, 0, None])
    # plt.legend()
    plt.xlabel('Dosing time (minutes)')
    plt.ylabel('TPD peak integral (arbitrary units)')
    if save_overview_plots:
        if not os.path.exists(overview_plot_savefolder):
            os.makedirs(overview_plot_savefolder)
        plt.savefig(overview_plot_savefolder + gas + '_tpd_integrals.png',dpi=500, bbox_inches='tight')
        plt.savefig(overview_plot_savefolder + gas + '_tpd_integrals.eps',dpi=500, bbox_inches='tight')
        plt.savefig(overview_plot_savefolder + gas + '_tpd_integrals.pdf',dpi=500, bbox_inches='tight')
    plt.show()
    plt.close()




@dataclass
class Tpd_dataset:
    folder: str = None
    filename: str = None 
    gases: dict = None
    k_per_s: float = None
    temps: list = None
    t_shift: float = None
    kw_amp: float = None
    dosing_time: float = None #total dosing time of the molecule of interest
    label: str = None

    def read_data(self, temperature_column=1):
        """
        """
        self.data={}
        self.time, self.voltage= np.loadtxt(folderstart + self.folder + self.filename + ext, skiprows=3, usecols=(0,temperature_column), unpack=True)
        for gas in list(self.gases.keys()):
            self.data[gas]=np.loadtxt(folderstart + self.folder + self.filename + ext, skiprows=3, usecols=self.gases[gas], unpack=True)
        self.convert_voltage_to_temp() 
        self.background={}
        self.bg_index={}
        self.integrals={}

    def plot_tpds(self, use_gases=None):
        if not use_gases:
            use_gases = list(self.gases.keys())
        
        fig, ax=plt.subplots()
        for gas in use_gases:
            ax.plot(self.temperature, self.data[gas], c=colorscheme.get(gas), label=labels[gas])
        
        ax.set_xlim(self.temps)
        ax.set_xlabel('Temperature (K)')
        ax.set_ylabel('QMS signal')
        ax.legend(loc='best')
        if save_to_daily_folder:
            savefolder = folderstart + self.folder + self.filename + '/'
            if not os.path.exists(savefolder):
                os.makedirs(savefolder)
            fig.savefig(savefolder + 'tpd.png',dpi=500)

    def plot_tpds_normalized(self, use_gases=None):
        if not use_gases:
            use_gases = list(self.gases.keys())

        fig, ax=plt.subplots()
        for gas in use_gases:
            data = self.data[gas]-np.min(self.data[gas])
            ax.plot(self.temperature, data/np.max(data), c=colorscheme.get(gas), label=labels[gas])
        
        ax.set_xlim(self.temps)
        ax.set_xlabel('Temperature (K)')
        ax.set_ylabel('QMS signal (normalized)')
        ax.legend(loc='best')
        if save_to_daily_folder:
            savefolder = folderstart + self.folder + self.filename + '/'
            if not os.path.exists(savefolder):
                os.makedirs(savefolder)
            fig.savefig(savefolder + 'tpd_normalized.png',dpi=500)

    def plot_tpd_withbackground(self, gas):
        index = self.bg_index[gas]
        plt.plot(self.temperature[index], self.data[gas][index])
        plt.plot(self.temperature[index], self.background[gas][index])
        plt.show()
        plt.close()


    def convert_voltage_to_temp(self):
        """ 
        Uses beginning and end voltage of the file, not min and max
        """
        v_low = np.average(self.voltage[:10])
        v_high = np.average(self.voltage[-10:])
        K_per_V = (self.temps[1]-self.temps[0])/(v_high-v_low)
        V0 = v_low - self.temps[0]/K_per_V
        self.temperature = (self.voltage-V0)*K_per_V
        # print(self.temperature)

    def linear_background(self, gas, n_for_avg=3, start=None, stop=None, autostartstop=False):
        """
        n_for_avg = points for averaging on BOTH sides of the chosen temp
        start = start temperature
        stop = end temperature
        if not specified, start/end temperature of the TPD is used
        """
        if not start:
            integral_start = np.argwhere(self.temperature>self.temps[0])[0][0]
            start=self.temps[0]
        else:
            integral_start = np.argwhere(self.temperature>start)[0][0]

        if not stop:
            integral_stop = np.argwhere(self.temperature>self.temps[1])[0][0] 
            stop=self.temps[1]
        else:  
            integral_stop = np.argwhere(self.temperature>stop)[0][0]
        
        # print(integral_start, integral_stop)
        # print(self.temperature[integral_start], self.temperature[integral_stop])

        data = self.data[gas]

        avg_before = np.average(data[integral_start-n_for_avg:integral_start+n_for_avg])
        avg_after = np.average(data[integral_stop-n_for_avg:integral_stop+n_for_avg])
        # print(avg_before, avg_after)
        self.background[gas] = (avg_after-avg_before)/(stop-start) * (self.temperature-start)+avg_before
        self.bg_index[gas] = np.arange(integral_start, integral_stop+0.5, 1).astype(int)
        # print(self.bg_index)

    
    def calc_integral(self, gas):
        self.integrals[gas] = np.sum(self.data[gas][self.bg_index[gas]]-self.background[gas][self.bg_index[gas]])/len(self.bg_index[gas])
        






main()



