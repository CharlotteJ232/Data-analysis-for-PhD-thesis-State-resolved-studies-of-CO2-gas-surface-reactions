from dataclasses import dataclass
from matplotlib import pyplot as plt
import numpy as np
from scipy.optimize import least_squares
from matplotlib.ticker import (AutoMinorLocator, MultipleLocator)
import os
from matplotlib import cm
import colorcet as cc

folderstart = "C:/Users/jansenc3/surfdrive/DATA/"
# folderstart = "C:/Users/Werk/Surfdrive/DATA/"

datalist = []

def main():
    #
    datalist.append(Tpd_dataset(folder = '2023/11 Nov/231113/tpd/',
    filename = 'tpd06.txt',
    gases = ['CO'],
    column_number = 2,
    start = 250, #cycle number
    k_per_s = 1.5,
    temps = [90,650],
    kw_amp = 1, #estimate, because this was the large orifice
    dosing_time = 1, #minutes
    ncleaning = 1,
    label='45m sp'
    ))

    datalist.append(Tpd_dataset(folder = '2023/11 Nov/231113/tpd/',
    filename = 'tpd07.txt',
    gases = ['CO'],
    column_number = 2,
    start = 70, #cycle number
    k_per_s = 1.5,
    temps = [90,650],
    kw_amp = 1, #estimate, because this was the large orifice
    dosing_time = 1, #minutes
    ncleaning = 1,
    label='2nd CO TPD'
    ))


    for dataset in datalist:
        dataset.read_data()
        # dataset.plot_raw_tpd()
        dataset.convert_time_to_temp()
        # dataset.simple_background(n_for_avg=15, start=120) #stop=450,start=90
        dataset.plot_tpd(use_approximate_temp=True)
        # dataset.calculate_integral()
        # print(dataset.integral)
    
    plot_all_tpds(datalist, use_approximate_temp=True)
    # plot_integrals(datalist)

    # for dataset in datalist:
    #     dataset.read_data()
    # #     dataset.plot_raw_tpd()
    #     dataset.calc_end_time()
    #     dataset.convert_voltage_to_temp()
    #     dataset.simple_background(n_for_avg=15, start=120) #stop=450,start=90
    #     dataset.plot_tpd()
    #     dataset.calculate_integral()
    #     print(dataset.integral)
    
    # plot_all_tpds(datalist)
    # # plot_integrals(datalist)

def plot_integrals(datalist):
    for dataset in datalist:
        if dataset.dosing_time % 1:
                plt.plot(dataset.dosing_time, dataset.integral, 's')
        else:
            plt.plot(dataset.dosing_time, dataset.integral, 'o')
    plt.plot(-1, 0, 's', c='gray',label='Crystal dosing')
    plt.plot(-1, 0, 'o',c='gray', label='Background')
    plt.axis([0, None, 0, None])
    plt.legend()
    plt.xlabel('Dosing time (minutes)')
    plt.ylabel('TPD peak integral (arbitrary units)')
    plt.show()
    plt.close()

def plot_all_tpds(datalist, remove_background=False, use_approximate_temp=False):
    for dataset in datalist:
        if remove_background:
            corrected_data = (dataset.data[dataset.integral_start:dataset.integral_stop]-dataset.background)/dataset.kw_amp
            plt.plot(dataset.temperature_bg, corrected_data, label=dataset.label)
        else:
            if use_approximate_temp:
                plt.plot(dataset.temperature, dataset.data[dataset.start:dataset.end], label=dataset.label)
            else:
                plt.plot(dataset.temperature, dataset.data, label=dataset.label)
        
        # plt.plot(dataset.temperature_bg, corrected_data, label=str(dataset.ncleaning)+' cycles')
    # plt.plot(-1,0,'--',c='gray', label='Background')
    # plt.plot(-1,0, c='gray',label='Crystal dosing')
    plt.legend(fontsize=8, loc='upper right')
    plt.axis([dataset.temperature[0], dataset.temperature[-1], None, None])
    plt.xlabel('approximate temperature (K)')
    plt.ylabel('QMS signal')
    plt.show()
    plt.close()

def calc_s0():
    """
    s = s0 * (1-coverage^2)
    coverage(t) = integral from 0 to t of s(t) * flux
    coverage(t) = integral of s0 * (1-coverage^2(t)) *flux
    d coverage /dt = s0 * flux * (1-coverage^2(t))

    simplified:
    coverage = s * time * flux
    s = coverage/time/flux

    """
    print('not using data from experiments yet')
    p_d2 = 1E-7
    flux = p_d2 / 1E-6





@dataclass
class Tpd_dataset:
    folder: str = None
    filename: str = None 
    gases: list = None
    column_number: int = None
    start: int = None
    k_per_s: float = None
    temps: list = None
    kw_amp: float = None
    dosing_time: float = None #total dosing time of the molecule of interest
    ncleaning: int = None
    label: str = None

    def read_data(self):
        self.time, self.voltage, self.data = np.loadtxt(folderstart + self.folder + self.filename, skiprows=3, usecols=(0,1,self.column_number), unpack=True)

    def plot_raw_tpd(self):
        plt.plot(self.time-self.time[0], self.data)
        plt.title(self.dosing_time)
        plt.show()
        plt.close()

    def convert_time_to_temp(self):
        start_time = self.time[self.start]
        end_time = start_time + (self.temps[1]-self.temps[0])/self.k_per_s
        self.end = np.min(np.argwhere(self.time>end_time))
        self.temperature = np.linspace(self.temps[0], self.temps[1], self.end-self.start)

    def calc_end_time(self):
        start_time = self.time[self.start]
        end_time = start_time + (self.temps[1]-self.temps[0])/self.k_per_s
        self.end = np.min(np.argwhere(self.time>end_time))


    def convert_voltage_to_temp(self):
        v_low = np.average(self.voltage[:20])
        v_high = np.average(self.voltage[-20:])
        K_per_V = (self.temps[1]-self.temps[0])/(v_high-v_low)
        V0 = v_low - self.temps[0]*K_per_V
        self.temperature = self.voltage*K_per_V - V0



    def plot_tpd(self, use_approximate_temp=False):
        if use_approximate_temp:
            plt.plot(self.temperature, self.data[self.start:self.end])
        else:
            plt.plot(self.temperature, self.data)
        # plt.plot(self.temperature_bg, self.background)
        plt.axis([self.temps[0],self.temps[1], None, None])
        plt.title(self.dosing_time)
        plt.show()
        plt.close()

    def simple_background(self, n_for_avg=20, start=None, stop=None):
        if not start:
            self.integral_start=self.start
            start=self.temps[0]
        else:
            self.integral_start = self.start+np.where(self.temperature>start)[0][0]

        if not stop:
            self.integral_stop=self.end     
            stop=self.temps[1]
        else:  
            self.integral_stop = self.start+np.where(self.temperature>stop)[0][0]

        avg_before = np.average(self.data[self.integral_start-n_for_avg:self.integral_start])
        avg_after = np.average(self.data[self.integral_stop-n_for_avg:self.integral_stop])
        self.background = np.linspace(avg_before, avg_after, self.integral_stop-self.integral_start)
        self.temperature_bg = np.linspace(start, stop, self.integral_stop-self.integral_start)




    def calculate_integral(self, start=None, stop=None):
        """
        Corrects for KW amplitude
        """
        integral = np.sum(self.data[self.integral_start:self.integral_stop]-self.background)/(self.integral_stop-self.integral_start)
        self.integral = integral / self.kw_amp



    




main()




# datalist.append({'folder': '2023/02 Feb/230214/KW/',
# 'filename': 'tpd03.txt',
# 'gases':['D2'],
# 'start':200, #cycle number
# 'k/s':2,
# 'temps':[250,430],
# 'KW_amp':2.3E-7, #not super precise
# 'dosing_time':60 #minutes
# })